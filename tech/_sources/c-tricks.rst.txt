C - Tricks and Others
======================

**Malloc (sizeof(0))**
--------------------------

Malloc (sizeof(0)) will return - valid pointer

yes. sizeof(0) â€“> int size and it is 4

--------------------------

**How does scanf see the input?**
--------------------------------------

When scanf is called in a program it checks to see what is in the input file, that is, it checks to see what the user has typed in at the keyboard. Keyboard input is usually buffered. This means that the characters are held in a kind of waiting bay in the memory until they are read. The buffer can be thought of as a part of the input file stdin, holding some characters which can be scanned though. If the buffer has some characters in it, scanf will start to look through these; if not, it will wait for some characters to be put into the buffer.

There is an important point here: although scanf will start scanning through characters as soon as they are in the buffer, the operating system often sees to it that scanf doesn't get to know about any of the characters until the user has pressed the RETURN or ENTER key on the computer or terminal. If the buffer is empty scanf will wait for some characters to be put into it.

To understand how scanf works, it is useful to think of the input as coming in lines. A line is a bunch of characters ending in a newline character ``\n``. This can be represented by a box like the one below:

+---------------------------------+-------+
| some...chars.738/.              |  \\n  |
+---------------------------------+-------+

As far as scanf is concerned, the input is entirely made out of a stream of characters. If the programmer says that an integer is to be expected by using the %d conversion specifier then scanf will try to make sense of the characters as an integer. In other words, it will look for some characters which make up a valid integer, such as a group of numbers all between 0 and 9. If the user says that floating point type is expected then it will look for a number which may or may not have a decimal point in it. If the user just wants a character then any character will do! 

--------------------------

**Unary Operator Precedence**
--------------------------------------

Unary operators are operators which have only a single operand: that is, they operate on only one object. For instance:

``++  --  +  -  &``

The precedence of unary operators is from right to left so an expression like:

``*ptr++;``

would do ``++``
before ``*``. 

--------------------------------------


**The argument vector**
--------------------------------------
C was written in order to implement Unix in a portable form. Unix was designed with a command language which was built up of independent programs. These could be passed arguments on the command line. For instance:

.. code-block::

    ls -l /etc
    cc -o program prog.c

In these examples, the first word is the command itself, while the subsequent words are options and arguments to the command. We need some way getting this information into a C program. Unix solved this problem by passing C programs an array of these arguments together with their number as parameters to the function main(). Since then most other operating systems have adopted the same model, since it has become a part of the C language.

.. code-block:: c++

    main (argc,argv)
    int argc;
    char *argv[];
    {

    }

The traditional names for the parameters are the argument count argc and the argument vector (array) argv. The operating system call which starts the C program breaks up the command line into an array, where the first element argv[0] is the name of the command itself and the last argument argv[argc-1] is the last argument. For example, in the case of

.. code-block::

    cc -o program prog.c

would result in the values

.. code-block::

    argv[0]
        cc
    argv[1]
        -o
    argv[2]
        program
    argv[3]
        prog.c 

The following program prints out the command line arguments:

.. code-block:: c++

    main (argc,argv)
    int argc;
    char *argv[];
    {
        int i;

        printf ("This program is called %s\n",argv[0]);

        if (argc > 1)
        {
            for (i = 1; i < argc; i++)
            {
                printf("argv[%d] = %s\n",i,argv[i]);
            }
        }
        else
        {
            printf("Command has no arguments\n");
        }
    }

--------------------------------------

**Environment variables**
--------------------------------------
When we write a C program which reads command line arguments, they are fed to us by the argument vector. Unix processes also a set of text variable associations called environment variables. Each child process inherits the environment of its parent. The static environment variables are stored in a special array which is also passed to main() and can be read if desired.

.. code-block:: c++

    main (argc,argv,envp)

    int argc;
    char *argv[], *envp[];

    {

    }

The array of strings envp[] is a list of values of the environment variables of the system, formatted by

.. code-block::

    NAME=value

This gives C programmers access to the shell's global environment.

In addition to the envp vector, it is possible to access the environment variables through the call getenv(). This is used as follows; suppose we want to access the shell environment variable $HOME.

.. code-block:: c++

    char *string;
    string = getenv("HOME");

string is now a pointer to static but public data. You should not use string as if it were you're own property because it will be used again by the system. Copy it's contents to another string before using the data.

.. code-block:: c++

    char buffer[500];
    strcpy (buffer,string);







