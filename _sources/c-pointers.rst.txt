C - Pointers
======================

**ptr increments**
------------------------------------------------------------------

++*ip increments what? it increments what ip points to

.. code-block:: c++

    int a = 10;
    int *p = &a;
    // suppose &a = 4010 (address of a)

Because both ++ and * are unary operators, the are calculated from right to left ``–> ++ (*p)``.

++*p will inrement 4010 by 4 (int size) -> ++*p will have the value 4014.

-----------------

**Jump to address**
---------------------------------

Inline assembly might be the easiest and most "elegant" solution, although doing this is highly unusual, unless you are writing a debugger or some specialized introspective system.

Another option might be to declare a pointer to a void function ``(void (*foo)(void))``, then set the pointer to contain your address, and then invoke it:

.. code-block:: c++

    void (*foo)(void) = 0x12345678;
    foo();

There will be things pushed on the stack since the compiler thinks you are doing a subroutine call, but since you don't care about returning, this might work.

gcc has an extension that allows jumping to an arbitrary address:

.. code-block:: c++

    void *ptr = (void *)0x1234567;  // a random memory address
    goto *ptr;                      // jump there -- probably crash

This is pretty much the same as using a function pointer that you set to a fixed value, but it will actually use a jump instruction rather than a call instruction (so the stack won't be modified)

.. code-block:: c++

    unsigned long address=0x80; 

    void (*func_ptr)(void) = (void (*)(void))address;
    func_ptr();

-----------------

**const char* p and char const* p**
------------------------------------------------------------------

Difference between const char* p and char const* p

In const char* p, the character pointed by ‘p’ is constant, so u cant
change the value of character pointed by p but u can make ‘p’ refer to
some other location.
in char const* p, the ptr ‘p’ is constant not the character referenced by
it, so u cant make ‘p’ to reference to any other location but u can
change the value of the char pointed by ‘p’.

-----------------

**What is a pointer variable?**
---------------------------------

A pointer variable is a variable that may contain the address of another
variable or any valid address in the memory.
What is a pointer value and address?
A pointer value is a data object that refers to a memory location. Each
memory location is numbered in the memory. The number attached to
a memory location is called the address of the location.

-----------------

**Void pointer**
---------------------------------

A void pointer is a C convention for a raw address. The compiler has no
idea what type of object a void Pointer really points to. 

.. code-block:: 

    If you write ``int *ip;``,
    ip points to an int. If you write ``void *p;``, p does not point to a void.

    In C and C++, any time you need a void pointer, you can use another
    pointer type. For example, if you have a char*, you can pass it to a
    function that expects a void*. You don’t even need to cast it. In C (but
    not in C++), you can use a void* any time you need any kind of
    pointer, without casting. (In C++, you need to cast it).
    A void pointer is used for working with raw memory or for passing a
    pointer to an unspecified type.
    Some C code operates on raw memory. When C was first invented,
    character pointers (char *) were used for that. Then people started
    getting confused about when a character pointer was a string, when it
    was a character array, and when it was raw memory.

-----------------

**Dangling pointer:**
---------------------------------

A dangling pointer points to memory that has already been freed. The storage is no longer allocated. Trying to access it might cause a Segmentation fault.

Common way to end up with a dangling pointer:

.. code-block:: c++

    char* func()
    {
       char str[10];
       strcpy(str,"Hello!");
       return(str); 
    }
    //returned pointer points to str which has gone out of scope. 

You are returning an address which was a local variable, which would have gone out of scope by the time control was returned to the calling function. (Undefined behaviour)

Another common dangling pointer example is an access of a memory location via pointer, after free has been explicitly called on that memory.

.. code-block:: c++

    int *c = malloc(sizeof(int));
    free(c);
    *c = 3; //writing to freed location!

A memory leak is memory which hasn't been freed, there is no way to access (or free it) now, as there are no ways to get to it anymore. (E.g. a pointer which was the only reference to a memory location dynamically allocated (and not freed) which points somewhere else now.)

.. code-block:: c++

    void func(){
        char *ch;
        ch = (char*) malloc(10);
    }
    //ch not valid outside, no way to access malloc-ed memory

Char-ptr ch is a local variable that goes out of scope at the end of the function, leaking the dynamically allocated 10 bytes.

States of Pointers - Null Pointer, Void Pointer, Dangling Pointer, Wild Pointer

-----------------

**Types of pointer**
---------------------------------

A Pointer can be a Null Pointer or a Void Pointer or a Dangling Pointer or a Wild Pointer depending upon its state, which is defined by the operations performed on it or value it holds.

**Null pointer:**

Pointer assigned value NULL.
Example of null pointer:

.. code-block:: c++

    int *ptr=NULL;
    int *ptr = new int;
    delete ptr;
    ptr = NULL; // ptr is null pointer



**Void pointer:**

Pointer of type void which can take address assigned from any other pointer (except function pointer) and can be reassigned to other pointer type. Void pointers cannot be dereferenced. They act as place holder.
Example of void pointer:

.. code-block:: c++

    void *ptr;

**Dangling pointer:**

Pointer assigned some memory and then free that memory. After freeing when not assigned to NULL it still points to same memory address, such pointer are dangling pointer.
Example of dangling pointer:

.. code-block:: c++

    int* ptr=new int;
    <some ops with ptr >
    delete ptr; // at this stage, ptr is dangling pointer

**Wild pointer:**

Pointer which are not initialized during its definition holding some junk value( a valid address) are Wild pointer.
Example of wild pointer:

.. code-block:: c++

    int *ptr;


-----------------

**Data declarations**
---------------------------------

**Using the variable a, give definitions for the following:**
a) An integer 
b) A pointer to an integer 
c) A pointer to a pointer to an integer 
d) An array of 10 integers 
e) An array of 10 pointers to integers 
f) A pointer to an array of 10 integers 
g) A pointer to a function that takes an integer as an argument and returns an integer 
h) An array of ten pointers to functions that take an integer argument and return an integer

The answers are: 

.. code-block:: c++

    a) int a; // An integer 
    b) int *a; // A pointer to an integer 
    c) int **a; // A pointer to a pointer to an integer 
    d) int a[10]; // An array of 10 integers 
    e) int *a[10]; // An array of 10 pointers to integers 
    f) int (*a)[10]; // A pointer to an array of 10 integers 
    g) int (*a)(int); // A pointer to a function a that takes an integer argument and returns an integer 
    h) int (*a[10])(int); // An array of 10 pointers to functions that take an integer argument and return an integer 


People often claim that a couple of these are the sorts of thing that one looks up in textbooks-and I agree. While writing this article, I consulted textbooks to ensure the syntax was correct. However, I expect to be asked this question (or something close to it) when I'm being interviewed. Consequently, I make sure I know the answers, at least for the few hours of the interview. Candidates who don't know all the answers (or at least most of them) are simply unprepared for the interview. If they can't be prepared for the interview, what will they be prepared for? 

-----------------


test
