08-AppCoreComponents - Content Providers 
=============================================
Content providers are one of the four core android components. They are manage access to a structured set of data that is stored in Sqlite Database. Content providers can be used to share data between two different apps. Content Providers internally uses Sqlite library.

Accessing a provider
------------------------
An application accesses the data from a content provider with a ContentResolver client object. The ContentResolver methods provide the basic "CRUD" (create, retrieve, update, and delete) functions of persistent storage. The ContentResolver object in the client application's process and the ContentProvider object in the application that owns the provider automatically handle inter-process communication. ContentProvider also acts as an abstraction layer between database and the external appearance of data as tables. To access a provider, the application has to request permissions in its manifest file. This is described in more detail in the section Content Provider Permissions.

For example, to get a list of the words and their locales from the User Dictionary Provider, you call ContentResolver.query(). The query() method calls the ContentProvider.query() method defined by the User Dictionary Provider. The following lines of code show a ContentResolver.query() call:

.. code-block:: java

    // Queries the user dictionary and returns results
    mCursor = getContentResolver().query(
        UserDictionary.Words.CONTENT_URI, // The content URI of the words table
        mProjection, // The columns to return for each row
        mSelectionClause // Selection criteria
        mSelectionArgs, // Selection criteria
        mSortOrder); // The sort order for the returned rows


    // This defines a one-element String array to contain the selection argument.
    String[] mSelectionArgs = {""};

    // Gets a word from the UI
    mSearchString = mSearchWord.getText().toString();

    // Remember to insert code here to check for invalid or malicious input.

    // If the word is the empty string, gets everything
    if (TextUtils.isEmpty(mSearchString)) {
        // Setting the selection clause to null will return all words
        mSelectionClause = null;
        mSelectionArgs[0] = "";
    } else {
        // Constructs a selection clause that matches the word that the user entered.
        mSelectionClause = UserDictionary.Words.WORD + " = ?";

        // Moves the user's input string to the selection arguments.
        mSelectionArgs[0] = mSearchString;
    }

    // Does a query against the table and returns a Cursor object
    mCursor = getContentResolver().query(
        UserDictionary.Words.CONTENT_URI, // The content URI of the words table
        mProjection, // The columns to return for each row
        mSelectionClause // Either null, or the word the user entered
        mSelectionArgs, // Either empty, or the string the user entered
        mSortOrder); // The sort order for the returned rows

    // Some providers return null if an error occurs, others throw an exception
    if (null == mCursor) {
        /*
        * Insert code here to handle the error. Be sure not to use the cursor! You may want to
        * call android.util.Log.e() to log this error.
        */
        // If the Cursor is empty, the provider found no matches
    } else if (mCursor.getCount() < 1) {

        /*
        * Insert code here to notify the user that the search was unsuccessful. This isn't necessarily
        * an error. You may want to offer the user the option to insert a new row, or re-type the
        * search term.
        */

    } else {
        // Insert code here to do something with the results
    }


Reference:
--------------------
[1]: ``https://stuff.mit.edu/afs/sipb/project/android/docs/guide/topics/providers/content-providers.html``


 


 
