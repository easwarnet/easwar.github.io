06-NativeAppDevelopment - Hardware Abstraction Layer 
========================================================
A HAL allows the Android application/framework to communicate with the hardware specific device drivers. Android HAL defines a standard interface for hardware vendors to implement, which enables Android to be agnostic about lower-level driver implementations. Using a HAL allows you to implement functionality without affecting or modifying the higher level system. HAL implementations are packaged into modules and loaded by the Android system at the appropriate time.

In Android 8.0 and higher, the lower-level layers are re-written to adopt a new, more modular architecture. Devices running Android 8.0 and higher must support HALs written in HIDL, with a few exceptions listed below.

These HALs can be binderized or passthrough. In Android 11, HALs written in AIDL are also supported. All AIDL HALs are binderized.

Binderized HALs
-----------------

HALs expressed in HAL interface definition language (HIDL) or Android interface definition language (AIDL). These HALs replace both conventional and legacy HALs used in earlier versions of Android. In a Binderized HAL, the Android framework and HALs communicate with each other using binder inter-process communication (IPC) calls. All devices launching with Android 8.0 or later must support binderized HALs only.

Android requires the following HALS to to be binderized on all Android devices regardless of whether they are launch devices or upgrade devices:

- ``android.hardware.biometrics.fingerprint@2.1.`` Replaces fingerprintd which is no longer in Android 8.0.
- ``android.hardware.configstore@1.0.`` New in Android 8.0.
- ``android.hardware.dumpstate@1.0.`` The original interface provided by this HAL could not be shimmed and was changed. Because of this, dumpstate_board must be re-implemented on a given device (this is an optional HAL).
- ``android.hardware.graphics.allocator@2.0.`` Required to be binderized in Android 8.0 so file descriptors don't have to be shared between trusted and untrusted processes.
- ``android.hardware.radio@1.0.`` Replaces the interface provided by rild which lives in its own process.
- ``android.hardware.usb@1.0.`` New in Android 8.0.
- ``android.hardware.wifi@1.0.`` New in Android 8.0, replaces the legacy Wi-Fi HAL library that was loaded into system_server.
- ``android.hardware.wifi.supplicant@1.0.`` A HIDL interface over the existing wpa_supplicant process.

Passthrough HALs
------------------

A HIDL-wrapped conventional or legacy HAL. These HALs wrap existing HALs and can serve the HAL in binderized and same-process (passthrough) modes. Devices upgrading to Android 8.0 can use passthrough HALs. This usually implies that only one client can link to it or the service must be implemented in a way that it does not need exclusive access to hardware. The upside is that you save the communication overhead of using Binder.

Android requires the following HALs to be in passthrough mode on all Android devices regardless of whether they are launch devices or upgrade devices:

- ``android.hardware.graphics.mapper@1.0.`` Maps memory into the process it lives in.
- ``android.hardware.renderscript@1.0.`` Passes items in the same process (equivalent to openGL).

Same-Process HALs
-------------------

Same-Process HALs (SP-HALs) always open in the same process in which they are used. They include all HALs not expressed in HIDL as well as some that are not binderized. Membership in the SP-HAL set is controlled only by Google, with no exceptions.

SP-HALs include the following:

- ``openGL``
- ``Vulkan``
- ``android.hidl.memory@1.0 (provided by the Android system, always passthrough)``
- ``android.hardware.graphics.mapper@1.0.``
- ``android.hardware.renderscript@1.0``

Conventional & legacy HALs
-----------------------------
Conventional HALs (deprecated in Android 8.0) are interfaces that conform to a specific named and versioned application binary interface (ABI). The bulk of Android system interfaces (camera, audio, sensors, etc.) are in the form of conventional HALs, which are defined under hardware/libhardware/include/hardware.

Legacy HALs (also deprecated in Android 8.0) are interfaces that predate conventional HALs. A few important subsystems (Wi-Fi, Radio Interface Layer, and Bluetooth) are legacy HALs. While there's no uniform or standardized way to describe a legacy HAL, anything predating Android 8.0 that is not a conventional HAL is a legacy HAL. Parts of some legacy HALs are contained in libhardware_legacy, while other parts are interspersed throughout the codebase.

``Refer Topic: Binder and Chapter: HIDL on how to create a sample HAL interface using HIDL``

 


 
