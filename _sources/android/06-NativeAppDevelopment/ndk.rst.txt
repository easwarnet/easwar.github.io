06-NativeAppDevelopment - NDK 
=================================
The NDK (Native Development Kit) is a Development tool that allows you to program in C/C++ for Android devices. Usually Native Applications are used only for performance-critical or time-critical portions of a project.

For example Native applications are used in:
- Developing Algorithms
- Developing Hardware Abstraction Layer
- Improving performance for critical portions
- Reusing existing C/C++ libraries

The NDK provides headers and libraries that allow the developer to build activities, handle user input, use hardware sensors, access application resources by accessing Netive Applications that run in C++/C. Java or Kotlin is used for Applications that run above Android Framework while C++/C is used for Application that run below framework. For communication between these two JNI or Java Native Interface is used.

Some of the libs that can be accessed via Native Applications are
- OpenCV
- GLES
- FFMPEG
- Gstreamer
- Vulkan

Write an Android JNI program
---------------------------------

In this example, we shall create an activity, that calls a native method through JNI to obtain a string and displays the string on a TextView.

**1. Download NDK**

.. figure:: sdk-download-1.png
   :scale: 100 %

.. figure:: sdk-download-2.png
   :scale: 100 %

.. figure:: sdk-download-3.png
   :scale: 100 %

**2. Setup Project**

.. figure:: sdk-setup-1.png
   :scale: 100 %

.. figure:: sdk-setup-2.png
   :scale: 100 %

.. figure:: sdk-setup-3.png
   :scale: 100 %

**3. Example Code**

For any NDK, there are 4 different components that need attention

.. figure:: sdk-components.png
   :scale: 100 %

- Java based Activity
- C++ based Native Application
- CMake file
- Gradle File

Java based Activity
-----------------------
This JNI program uses a static initializer to load a shared library ndkexample, where the native method called stringFromNativeApplication() is defined. Once the method is invoked, it returns a String and is displayed in TextView.

.. code-block:: java

    package com.tarjet.ndkexample;

    import androidx.appcompat.app.AppCompatActivity;

    import android.os.Bundle;
    import android.widget.TextView;

    import com.tarjet.ndkexample.databinding.ActivityMainBinding;

    public class MainActivity extends AppCompatActivity {

        // Used to load the 'ndkexample' library on application startup.
        static {
            System.loadLibrary("ndkexample");
        }

        private ActivityMainBinding binding;

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);

            binding = ActivityMainBinding.inflate(getLayoutInflater());
            setContentView(binding.getRoot());

            // Example of a call to a native method
            TextView tv = binding.sampleText;
            tv.setText(stringFromNativeApplication());
        }

        /**
        * A native method that is implemented by the 'ndkexample' native library,
        * which is packaged with this application.
        */
        public native String stringFromNativeApplication();
    }

C++ based Native Application
---------------------------------
This simple C++ based Native application explains when a JNI call to API is invoked a string is returned.

.. code-block:: c++

    extern "C" JNIEXPORT jstring JNICALL
    Java_com_somename_ndkexample_MainActivity_stringFromNativeApplication(
    JNIEnv* env,
    jobject /* this */) {
        std::string hello = "Hello from C++";
        return env->NewStringUTF(hello.c_str());
    }

Cmake
--------
C++ based native application uses CMake as make system.

.. code-block:: cmake

    cmake_minimum_required(VERSION 3.18.1)
    # Name of Project
    project("ndkexample")

    add_library( # Sets the name of the library.
    ndkexample

    # Sets the library as a shared library.
    SHARED

    # Provides a relative path to your source file(s).
    native-lib.cpp)

    find_library( # Sets the name of the path variable.
    log-lib

    # Specifies the name of the NDK library that
    # you want CMake to locate.
    log)

    target_link_libraries( # Specifies the target library.
    ndkexample

    # Links the target library to the log library
    # included in the NDK.
    ${log-lib})

Gradle
--------

.. figure:: sdk-gradle.png
   :scale: 100 %

Build and Run
----------------

.. figure:: sdk-buildrun.png
   :scale: 100 %





 
