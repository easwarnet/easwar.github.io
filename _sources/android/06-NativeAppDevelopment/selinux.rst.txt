06-NativeAppDevelopment - SELinux 
===================================
SELinux is set up to default-deny, which means that every single access for which it has a hook in the kernel must be explicitly allowed by policy. This means a policy file is comprised of a large amount of information regarding rules, types, classes, permissions, and more.

Policy Format
--------------
.. code-block::

    allow Source Target:Class Permission;

This means “grant Permission to a process of domain (type) Source on objects of type Target and class Class”

**Example**

.. code-block::

    allow testservice property_socket:sock_file { open write };

In the above example Service "testservice" is granted open and write permission for "property_socket:sock_file"

Policy Rules
--------------
Files that end with ``*.te`` are SELinux policy source files, which define domains and their labels. 
You may need to create new policy files in ``/device/manufacturer/device-name/sepolicy``, but you should try to update existing files where possible.

Your should define your domain and label.

1. Define your dev_type (/device/manufacturer/device-name/sepolicy/<policy_name>.te):

.. code-block::

    type device, dev_type;

2. Label file with your type (/device/manufacturer/device-name/sepolicy/file_contexts):

.. code-block::

    /vendor/bin/testservice u:object_r:testservice_exec:s0

After editing or adding policy and context files, update your ``/device/manufacturer/device-name/BoardConfig.mk`` 
makefile to reference the sepolicy subdirectory and each new policy file.

.. code-block::

    BOARD_SEPOLICY_DIRS += \
    <root>/device/manufacturer

    /device-name

    /sepolicy

    BOARD_SEPOLICY_UNION += \
    genfs_contexts \
    file_contexts \
    sepolicy.te

Reference:
--------------
[1]: ``https://source.android.com/docs/security/selinux``






 
