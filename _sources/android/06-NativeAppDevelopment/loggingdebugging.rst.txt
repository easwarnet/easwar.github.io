06-NativeAppDevelopment - Logging and Debugging 
==================================================
This topic covers the way to Logging, Log Analysis and Debugging netive applications in Android.

Logging
----------
Android uses Logcat tool to display Logs on ADB Console or Logcat window of Android studio. Android Logging in general displays the system messages, garbage collection as and when it occur. The logs are displayed in realtime and also keeps the history.

Logging Message Types
~~~~~~~~~~~~~~~~~~~~~~~~
Following are the Logging Message types display from the highest to lowest priority.

**C++:**

.. code-block:: c++

    ALOGE("%s",message); //Error Message
    ALOGW("%s",message); //Warning Message
    ALOGI("%s",message); //Information Message
    ALOGD("%s",message); //Debug Message
    ALOGV("%s",message); //Verbose Message

**Java:**

.. code-block:: c++

    Log.e(String, String); //Error Message
    Log.w(String, String); //Warning Message
    Log.i(String, String); //Information Message
    Log.d(String, String); //Debug Message
    Log.v(String, String); //Verbose Message

Logcat Command Line Tool
------------------------------
**Options**

The following table describes the command line options of logcat.

Option and Description

.. code-block::

    -b <buffer>
    Loads an alternate log buffer for viewing, such as event or radio. The main buffer is used by default. See Viewing Alternative Log Buffers.

    -c
    Clears (flushes) the entire log and exits.

    -d
    Dumps the log to the screen and exits.

    -f <filename>
    Writes log message output to <filename>. The default is stdout.

    -g
    Prints the size of the specified log buffer and exits.

    -n <count>
    Sets the maximum number of rotated logs to <count>. The default value is 4. Requires the -r option.

    -r <kbytes>
    Rotates the log file every <kbytes> of output. The default value is 16. Requires the -f option.

    -s
    Sets the default filter spec to silent.

    -v <format>
    Sets the output format for log messages. The default is brief format. For a list of supported formats, see Controlling Log Output Format.

**Logcat - Useful Command**

Logcat commands can be used in adb console. Following are some useful commands used to debug or display Log messages

.. code-block:: shell

    adb_shell$ logcat -b <service>
    View the buffer that contains specified service related messages. eg gnss, sensor, radio

    adb_shell$ logcat -b event
    View the buffer containing events-related messages.

    adb_shell$ logcat -b main
    default

    adb_shell$ logcat -c
    Clears the entire log and exits.

    adb_shell$ logcat -d
    Dumps the log to the screen and exits.

    adb_shell$ logcat -f logs.text
    Writes log message output to logs.text

    adb_shell$ logcat -g
    Prints the size of the specified log buffer and exits.

    adb_shell$ logcat -n <count>
    Sets the maximum number of rotated logs to <count>.

    adb_shell$ logcat -r <kbytes>
    Rotates the log file every <kbytes> of output. The default value is 16. Requires the -f option.

    adb_shell$ logcat -v brief
    Display priority/tag and PID of the process issuing the message (default format).

    adb_shell$ logcat -v process
    Display PID only.

    adb_shell$ logcat -v tag
    Display the priority/tag only.

    adb_shell$ logcat -v raw
    Display the raw log message, with no other metadata fields.

    adb_shell$ logcat -v time
    Display the date, invocation time, priority/tag, and PID of the process issuing the message.

    adb_shell$ logcat -v threadtime
    Display the date, invocation time, priority, tag, and the PID and TID of the thread issuing the message.

    adb_shell$ logcat -v long
    Display all metadata fields and separate messages with blank lines.

Debugging
-------------
GDB can be used to debug a native application.

**Set GDB Server on Device:**

.. code-block:: shell

    Set SeLinux to permissive mode
    # su -c setenforce 0

    Push the gdbserver to the device
    # adb push ~/android-sdk-linux/ndk-bundle/prebuilt/android-<arch>/gdbserver/gdbserver /data/local/tmp

    Change permissions of gdbserver to Executable
    adb_shell$ chmod 777 /data/local/tmp/gdbserver

    Initiate the forwarding of a TCP port on which GDB
    adb forward tcp:5555 tcp:5555

    Run the Application with GDB
    adb_shell$ ./data/local/tmp/gdbserver :5555 ./<path>/testapplication

    If above case doesnot work, fetch the pid of the process by using command
    adb_shell$ ps | grep testapplication
    adb_shell$ ./data/local/tmp/gdbserver :5555 <PID of testapplication>

    The application will wait for the client to connect

**Set GDB Client on Host PC:**

.. code-block:: shell

    hostpc$ aarch64-linux-android-gdb
    hostpc$ set sysroot
    hostpc$ target remote <device-ip-address>:<5555>
    hostpc$ continue

Following this you will be able to debug the application that runs on target device from HostPC.

Crash dumps and tombstones
----------------------------
When a service crashes, a crash dump is written to logcat and a more detailed tombstone file is generated in path /data/tombstones/. The tombstone contains stack traces for all the threads in the crashing process, a full memory map, and a list of all open file descriptors.






