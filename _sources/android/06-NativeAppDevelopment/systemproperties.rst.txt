06-NativeAppDevelopment - System Properties 
=============================================
System properties are a way to share global data across OS. Each partition can use its own system properties internally. System properties start with a prefix, which can be ro for properties only set once, or persist for properties that should still exist after a reboot. The properties can be set read-only or writable, or the values can be rolled back.

Some Examples of Android's System Property

**ro.build.id**

Gives the build number of the current Android Os running in device

**ro.build.type**

Gives the type of build the device has currently running such as Engineering Debug, Engineering Build, Release


Command Line
--------------
A system property can be created, set and read using command line. However it is not persistent and needs to be set again after reboot, unless it is automatically created using init rc script.

.. code-block:: shell

    ### Create a property
    adb_shell# setprop propertykey propertyvalue

    ### Get a Property
    adb_shell# getprop propertykey

Run Time Access of System Property
------------------------------------------
A property can be accessed by a program during Android Runtime. Below is the Cpp example on how System Properties can be accessed during Runtime.

.. code-block:: c++

    String propertyvalue;
    System.setProperty("propertykey", "propertyvalue");
    myprop = System.getProperty("propertyvalue");
    Log.i(TAG, "propertykey value: " + propertyvalue);

Predefined
--------------
There are also ways to define a predefined system property when Android is being built.

**Define System Properties under Proto File**

Define system properties as APIs with Sysprop Description files (.sysprop), which use a TextFormat of protobuf, with the following schema:

.. code-block:: c++

    // File: sysprop.proto

    syntax = "proto3";

    package sysprop;

    enum Access {
        Readonly = 0;
        Writeonce = 1;
        ReadWrite = 2;
    }

    enum Owner {
        Platform = 0;
        Vendor = 1;
        Odm = 2;
    }

    enum Scope {
        Public = 0;
        Internal = 2;
    }

    enum Type {
        Boolean = 0;
        Integer = 1;
        Long = 2;
        Double = 3;
        String = 4;
        Enum = 5;
        UInt = 6;
        ULong = 7;

        BooleanList = 20;
        IntegerList = 21;
        LongList = 22;
        DoubleList = 23;
        StringList = 24;
        EnumList = 25;
        UIntList = 26;
        ULongList = 27;
    }

    message Property {
        string api_name = 1;
        Type type = 2;
        Access access = 3;
        Scope scope = 4;
        string prop_name = 5;
        string enum_values = 6;
        bool integer_as_bool = 7;
        string legacy_prop_name = 8;
    }

    message Properties {
        Owner owner = 1;
        string module = 2;
        repeated Property prop = 3;
    }

**Sysprop Description file**

A Sysprop Description file contains a property message that describes a set of properties. The meaning of its fields are as follows.

+----------------+--------------------------------------------------------------------------------+
| **Field**      | **Meaning**                                                                    |
+----------------+--------------------------------------------------------------------------------+
| owner          | Set to the partition that owns the properties: Platform, Vendor, or Odm.       |
+----------------+--------------------------------------------------------------------------------+
| module         | | Used to create a namespace (C++) or static final class (Java) in which       |
|                | | generated APIs are placed. For example, com.android.sysprop.BuildProperties  |
|                | | will be namespace com::android::sysprop::BuildProperties in C++, and the     |
|                | | BuildProperties class in the package in com.android.sysprop in Java.         |
+----------------+--------------------------------------------------------------------------------+
| prop           | List of properties.                                                            |
+----------------+--------------------------------------------------------------------------------+

**Property**

The meanings of the Property message fields are as follows.

+----------------+--------------------------------------------------------------------------------+
| **Field**      | **Meaning**                                                                    |
+----------------+--------------------------------------------------------------------------------+
| api_name       | The name of the generated API.                                                 |
+----------------+--------------------------------------------------------------------------------+
| type           | The type of this property.                                                     |
+----------------+--------------------------------------------------------------------------------+
| access         | | Readonly: Generates getter API only                                          |
|                | | Writeonce, ReadWrite: Generates getter and setter APIs                       |
+----------------+--------------------------------------------------------------------------------+
| scope          | | Internal: Only the owner can access.                                         |
|                | | Public: Everyone can access, except for NDK modules.                         |
+----------------+--------------------------------------------------------------------------------+
| prop_name      | The name of the underlying system property, for example ro.build.date.         |
+----------------+--------------------------------------------------------------------------------+
| enum_values    | | (Enum, EnumList only) A bar(|)-separated string that consists of possible    |
|                | | enum values. For example, value1|value2.                                     |
+----------------+--------------------------------------------------------------------------------+

**Sysprop Description file**

Here's an example of a Sysprop Description file defining three properties:

.. code-block::

    # File: android/sysprop/PlatformProperties.sysprop

    owner: Platform
    module: "android.sysprop.PlatformProperties"
    prop {
        api_name: "build_date"
        type: String
        prop_name: "ro.build.date"
        scope: Public
        access: Readonly
    }
    prop {
        api_name: "date_utc"
        type: Integer
        prop_name: "ro.build.date_utc"
        scope: Internal
        access: Readonly
    }
    prop {
        api_name: "device_status"
        type: Enum
        enum_values: "on|off|unknown"
        prop_name: "device.status"
        scope: Public
        access: ReadWrite
    }


**Defining system properties libraries**

You can now define sysprop_library modules with Sysprop Description files. sysprop_library serves as an API for both C++ and Java. The build system internally generates one java_library and one cc_library for each instance of sysprop_library.

.. code-block::

    // File: Android.bp
    sysprop_library {
        name: "PlatformProperties",
        srcs: ["android/sysprop/PlatformProperties.sysprop"],
        property_owner: "Platform",
        vendor_available: true,
    }

You must include API lists files in the source for API checks. To do this, create API files and an api directory. Put the api directory in the same directory as Android.bp. 
The API filenames are ``<module_name>-current.txt``, ``<module_name>-latest.txt``. ``<module_name>-current.txt`` holds the API signatures of current source codes, 
and ``<module_name>-latest.txt`` holds the latest frozen API signatures. The build system checks whether the APIs are changed by comparing these API files with 
generated API files at build time and emits an error message and instructions to update ``current.txt`` file if current.txt doesn't match with the source codes. 
Here's an example directory and file organization:

.. code-block::

    ├── api
    │ ├── PlatformProperties-current.txt
    │ └── PlatformProperties-latest.txt
    └── Android.bp


**Makefile**

Both Java and C++ client modules can link against sysprop_library to use generated APIs. The build system creates links from clients to generated C++ and Java libraries, thus giving clients access to generated APIs.

.. code-block::

    java_library {
        name: "JavaClient",
        srcs: ["java_access.java"],
        libs: ["PlatformProperties"],
    }

    cc_binary {
        name: "cc_client",
        srcs: ["cpp_access.cpp"],
        shared_libs: ["PlatformProperties"],
    }


**Java Example**

.. code-block:: java

    import android.sysprop.PlatformProperties;
    //…
    static void java_access() {
        //…
        // read "ro.build.date_utc". default value is -1
        Integer dateUtc = PlatformProperties.date_utc().orElse(-1);

        // set "device.status" to "unknown" if "ro.build.date" is not set
        if (!PlatformProperties.build_date().isPresent()) {
            PlatformProperties.device_status(PlatformProperties.device_status_values.UNKNOWN);
        }
        //…
    }
    //…

**CPP Example**

.. code-block:: c++

    #include <android/sysprop/PlatformProperties.sysprop.h>
    using namespace android::sysprop;

    //…

    void cpp_access() {
        //…
        // read "ro.build.date". default value is "(unknown)"
        std::string build_date = PlatformProperties::build_date().value_or("(unknown)");

        // set "device.status" to "on" if it's "unknown" or not set
        using PlatformProperties::device_status_values;
        auto status = PlatformProperties::device_status();
        if (!status.has_value() || status.value() == device_status_values::UNKNOWN) {
            PlatformProperties::device_status(device_status_values::ON);
        }
        //…
    }

Reference:
-------------
[1]: ``https://source.android.com/docs/core/architecture/sysprops-apis``

[2]: ``https://source.android.com/docs/core/architecture/configuration/add-system-properties``





 
