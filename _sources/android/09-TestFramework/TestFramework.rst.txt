TestFramework
==================================

**Android CTS**
------------------------------------------------

The Compatibility Test Suite (CTS) is a downloadable testing suite that tests the compatility of the Target Hardware. The CTS runs on a desktop machine and executes test cases directly on attached devices or an emulator. Once the test is completes and the hardware compatilibility is achieved, the test report needs to be submitted to ``cts@android.com``, requesting access to the Market.

.. figure:: cts1.png
   :scale: 100 %

Steps
----------
- Download CTS from ``https://source.android.com/docs/compatibility/cts/downloads``

- Connect the target hardware device through adb. Ensure device is visible via 'adb devices'

- CTS can also be locally built using command

.. code-block:: shell

    $ make cts -j TARGET_PRODUCT=aosp_arm64

- Launch the cts console

.. code-block:: shell

    $ out/host/linux-x86/cts/android-cts/tools/cts-tradefed

- Run the default CTS plan

.. code-block:: shell

    cts-tradefed > run cts

- To run a test module

.. code-block:: shell

    cts-tradefed > run cts --module <module_name>

- To run a specific test

.. code-block:: shell

    cts-tradefed > run cts --module <module_name> --test <test_name>

- CTS Help

.. code-block:: shell

    cts-tradefed > run cts --help

Block Diagram:
----------------

.. figure:: cts2.png
   :scale: 100 %

Reference:
----------------

[1]: ``https://source.android.com/docs/compatibility/cts/run``

[2]: ``https://android.googlesource.com/platform/cts/+/android-o-mr1-iot-release-1.0.0/tools/cts-tradefed/README``

----------------

**Android VTS**
------------------------------------------------

Android-VTS (Vendor Test Suite) is an infrastructure that automates HAL and OS kernel testing. Android-VTS provides extensive functionality for Android testing and promotes a test-driven development process. Use this tag for questions referring to building, writing and using Android-VTS to test an Android native system implementation.

.. figure:: vts.png
   :scale: 100 %


Steps
---------
1. Setup VTS test environment, Python and Protocol Buffer Packages
Install Python and Protocol Buffer tools

.. code-block:: shell

    $ sudo apt-get install python-dev
    $ sudo apt-get install python-protobuf
    $ sudo apt-get install protobuf-compiler

Install Python virtual environment

.. code-block:: shell

    $ sudo apt-get install python-virtualenv
    $ sudo apt-get install python-pip

Setup Environment

.. code-block:: shell

    $ . test/vts/script/setup.sh
    $ . test/vts/script/build-python.sh

2. Download Android Source Code

3. Build an Android image

4. Build a VTS package

.. code-block:: shell

    $ cd ${branch}
    $ make vts -j8
    ### Equivalent command
    $ make -j8 vts showcommands dist TARGET_PRODUCT=aosp_arm64 WITH_DEXPREOPT=false TARGET_BUILD_VARIANT=userdebug

5. Connect to an Android device after enabling debugger mode

6. Run a VTS test plan

.. code-block:: shell

    $ vts-tradefed
    ### After VTS console opens
    > run vts
    ### Advanced Module level VTS execution
    > run <plan> -m <module> -t <packageName.className>

7. VTS Test Report

The uploadable report xml file can be found at: ``out/host/linux-x86/vts/android-vts/results/``

8. Check the test logs

.. code-block:: shell

    $ ls out/host/linux-x86/vts/android-vts/logs/

Official Plans
------------------
Official plans contain only verified tests, and are for all Android developers and partners.

vts: For all default VTS tests.
vts-firmware: For all default VTS System Firmware tests.
vts-fuzz: For all default VTS fuzz tests.
vts-hal: For all default VTS HAL (hardware abstraction layer) module tests.
vts-hal-profiling: For all default VTS HAL performance profiling tests.
vts-hal-replay: For all default VTS HAL replay tests.
vts-kernel: For all default VTS kernel tests.
vts-library: For all default VTS library tests.
vts-performance: For all default VTS performance tests

Reference:
------------------
[1]: ``https://android.googlesource.com/platform/test/vts/+/fb7d768d295720d9edfca8c9c1e215ac631f3bc6/doc/user_manual.md``






 

 
