03-AndroidTools - ADB 
==============================
ADB or Android Debug Bridge is a command line tool used to communicate with the Target Device. ADB operates on the Client-Server model. ADB can be used for various device actions including pushing Android Services from AOSP to Device.

To enable ADB Communication with the device, following actions are required

Enable Developers Options on Device
--------------------------------------
- To enable Developers Options on device, Build number which is found under "Settings > About Phone > Build Number" needs to be tapped 7 consecutive times.

.. figure:: developer.gif
   :scale: 100 %

Enable Debugging
---------------------
- Device debugging can be done across multiple interfaces such as USB and Wireless. The most commonly used debugging interface is USB. To enable USB Debugging on the target device, USB Debugging needs to be enabled. It can be found under "Settings > System > Advanced > Developer Options > USB debugging".

.. figure:: usbdebugging.jpg
   :scale: 100 %

Install ADB
--------------
The ADB tool is part of the AOSP project. It can be accessed, once the Environment setup (source build/envsetup.sh) is done. ADB is also part of Android SDK Platform Tools. It can be installed using Android Studio.
To install this package goto menu "Tools -> SDK Manager" and select Android SDK Platform Tools and click Ok or Apply. The selected package will be installed. After which the ADB can be accessed from the Command Line.

- Step 1

.. figure:: sdkmenu.png
   :scale: 100 %

- Step 2

.. figure:: sdkdialog.png
   :scale: 100 %

ADB Components
----------------

ADB consists of 3 components

1. ADB Clients

A client runs on your development machine. There can be multiple clients running under the same development machine. Each time an ADB session is invoked a new client is created. Client accepts and sends commands.

2. ADB Server

A server also runs on your development machine. It acts as an interface and manages communication between ADB Clients running on the Development Machine and ADB Daemon running on the target device.

3. ADB Daemon

ADB daemon is a process that runs on Target devices. This accepts ADB commands, executes them on the Target device.

.. figure:: adbcore.png
   :scale: 100 %


Roles of ADB
--------------
- Facilitating Communication between Host and Target
- Execution of commands on Target Devices

Useful ADB Commands
----------------------

.. code-block:: shell

    // Runs ADB in root privilege
    $ adb root

    // List devices interfaces with the development machine
    $ adb devices

    // Enables command line utility on Development machine to execute commands on Target Machine
    $ adb shell

    // Used to push Apps, Services, Native Applications and binaries to target device from host machine
    $ adb push

    // Used to pull Apps, Services, Native Applications and binaries from target device to host machine
    $ adb pull

    // Used to reboot target device in normal mode. Typically run this command after the device is flashed 
    // or binaries are pushed and needs to reboot
    $ adb reboot

    // Used to remount the entire system of the target device, to put the “/system” partition into writable 
    // mode. This command can be run before pushing any files to this partition. Note that it’s only possible 
    // to remount the system on a rooted Android device.
    $ adb remount

    // Dumps logs of system messages, that includes stack traces and messages logged by applications with the "Log" class
    $ adb logcat

    // Installs new APK package to the Target device with specified serial number
    $ adb -s <device-serial-number> install -t <path-to-APK>


 


 
