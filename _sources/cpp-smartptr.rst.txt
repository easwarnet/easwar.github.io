C++ - Smart Pointer
======================

**std::unique_ptr**
---------------------------------

**What happens when a std::unique_ptr is passed by value to a function? For example, in this code snippet?:**

.. code-block:: c++

    #include <memory>

    auto f(std::unique_ptr<int> ptr) {
      *ptr = 42;
      return ptr;
    }

    int main() {
      auto ptr = std::make_unique<int>();
      ptr = f(ptr);
    }


**Why this C++ question?**

As mentioned before, memory management is a nontrivial burden for the C++ programmer. Smart pointers are helpful in this regard, but they must be well understood in order to be used correctly.

**Possible answers**

The correct answer is that this code won’t even compile. The std::unique_ptr type cannot be copied, so passing it as a parameter to a function will fail to compile.
To convince the compiler that this is fine, std::move can be used:

.. code-block:: c++

    ptr = f(std::move(ptr));

**Follow-up questions**

The interview candidate might think that returning a noncopiable object from a function is also a compiler error, but in this case it’s allowed, thanks to copy elision. You can ask the candidate under what conditions copy elision is performed.

Of course, the above construct with std::move is less than ideal. Ask the candidate how they would change the function f to make it better. For example, passing a (const) reference to the unique_ptr, or simply a reference to the int pointed to, is probably preferred.













